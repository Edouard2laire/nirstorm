function [local_fns, downloaded_files] = nst_request_files(relative_fns, confirm_download, nst_data_url, default_file_size)
% Request nirstorm files: if they are not available in the user directory
% then attempt to download them from given url.
% The given files in relative_Fns are relative to the nirstorm data root.
% More precisely, for a given requested file 'subd1/subd2/file.ext', it first 
% looks in "<BrainstormUserDir>/defaults/nirstorm/subd1/subd2/file.ext".
% If not found, it tries to download it from the http url 
% "http://<nst_data_url>/subd1/subd2/file.ext
%
% The amount of data to downloaded is first evealuated and a confirmation 
% can be asked to the user (if confirm_download is 1) so that not too much data
% is downloaded by mistake.
%
% The function checks the consistency between local and remote 
% files. If one file is available locally but is not available
% remotely, an exception is thrown.
% 
% Args:
%    - relative_fns (cell array of cell array of string):
%        Pathes to files relative to the nirstorm root directory which is 
%        either the local nistorm user directory or the root of the online 
%        repository.
%        Each relative path is broken down into subdirectories and 
%        file name.
%        Files at the root dir (not in subdir) also have to be encapsulated
%        in a cell array.
%        Example:  { {'subd1', 'subd1_2', 'file.txt'},
%                    {'subd2', 'file2.txt'},
%                    {'file_at_root.txt'} }
%        Note: this is a portable way of specifying file pathes that can 
%              be used both for url where separator is "/" and for windows
%              where separator is "\".
%
%    - confirm_download (boolean):
%        Whether to give the user the volume of data to be downloaded and 
%        ask for confirmation.
%   [- nst_data_url (string):]
%        http URL pointing to the nirstorm repository, where file listings 
%        have been generated by webfs.
%        Each directory containing files should contain a file called
%        "file_sizes.csv" lising all files in the directory and their size
%        in bytes.
%        Default is gotten from nst_get_repository_url.
%   [- default_file_size (int):]
%        Default file size in bytes to use when "file_sizes.csv" is not
%        available in the online repository.
% 
%  Outputs:
%      - local_fns (cell array of string):
%          Full local filenames for requested files.
%      - downloaded_files (cell array of string):
%          Remote file names that actually got downloaded (were not
%          available locally)

if nargin < 2
    confirm_download = 1;
end

if nargin < 3
    nst_data_url = nst_get_repository_url();
end

if nargin < 4
    default_file_size = nan;
end

if ~iscell(relative_fns) || (~isempty(relative_fns) && (~iscell(relative_fns{1}) || ~isstr(relative_fns{1}{1})))
    error('Given relative_fns must be a cell array of cell arrays of str');
end

local_nst_dir = bst_fullfile(bst_get('BrainstormUserDir'), 'defaults', 'nirstorm');
to_download_urls = {};
remote_files_not_found = {};
to_download_sizes = [];
idownload = 1;

bst_progress('start', 'Retrieve server info','Evaluate data to download from server...', 1, length(relative_fns));
for ifn=1:length(relative_fns)
    local_fns{ifn} = fullfile(local_nst_dir, strjoin(relative_fns{ifn}, filesep));
    if ~exist(local_fns{ifn}, 'file')
        remote_folder = strjoin({nst_data_url, strjoin(relative_fns{ifn}(1:(end-1)), '/')}, '/');
        url = strjoin({remote_folder, relative_fns{ifn}{end}}, '/');
        % Check if remote file exist:
        jurl = java.net.URL(url);
        conn = openConnection(jurl);
        if ~isempty(strfind(url, 'http:'))
            status = getResponseCode(conn);
            if status == 404
                remote_files_not_found{end+1} = url;
                continue;
            end
        else % ftp
            try
                conn.connect();
            catch
                remote_files_not_found{end+1} = url;
                continue;
            end
        end
        to_download_urls{idownload} = url;
        download_targets{idownload} = local_fns{ifn};
        idownload = idownload + 1;
        
        % Resolve file size:
        if isempty(strfind(remote_folder, 'ftp:'))
            remote_listing_file_sizes_fn = strjoin({remote_folder, 'file_sizes.csv'}, '/');
            try
                file_sizes = webread(remote_listing_file_sizes_fn);
                to_download_sizes(end+1) = file_sizes(strcmp(file_sizes.file_name, ...
                                                      relative_fns{ifn}{end}),:).size;
            catch ME
                disp(['Warning: table of file sizes not found at ' remote_listing_file_sizes_fn ...
                    '. Using default file size.']);
                to_download_sizes(end+1) = default_file_size;
            end
        else
            [ftp_site, rdir] = nst_split_ftp(remote_folder);
            hftp = ftp(ftp_site);
            rftp = dir(hftp, [rdir '/' relative_fns{ifn}{end}]);
            to_download_sizes(end+1) = rftp.bytes;
        end
    end
    bst_progress('inc',1);
end
bst_progress('stop');

if ~isempty(remote_files_not_found)
    exception = MException('NIRSTORM:RemoteFilesNotFound', ...
                           strjoin(['Remote files not found:', remote_files_not_found], '\n'));
    throw(exception);
end

if all(~isnan(to_download_sizes))
    total_download_size = nansum(to_download_sizes);
else
    total_download_size = nan;
end
downloads_failed = {};
if ~isempty(to_download_urls)
    confirm_msg = sprintf('Warning: %s of data (%d files) will be downloaded to %s.\n\nConfirm download?', ...
                          format_file_size(total_download_size), length(to_download_urls), local_nst_dir);
    if confirm_download && ~java_dialog('confirm', confirm_msg, 'Download warning');
        downloaded_files = {};
        local_fns = {};
        return;
    end
    
    bst_progress('start', 'Data download', 'Downloading data...', 1, length(to_download_urls));
    for idownload=1:length(to_download_urls)
        if ~nst_download(to_download_urls{idownload}, download_targets{idownload});
            downloads_failed{end+1} = to_download_urls{idownload};
        end
        bst_progress('inc',1);
    end
    bst_progress('stop');
end

if ~isempty(downloads_failed)
    throw(MException('NIRSTORM:DownloadFailed', strjoin(['Failed downloads:', downloads_failed], '\n')));
end

downloaded_files = to_download_urls;
end

function ssize = format_file_size(size)
if isnan(size)
    ssize = 'unknown amount';
elseif size < 1000
    ssize = [num2str(size) 'B'];
elseif size < 1e6
    ssize = sprintf('%1.2f Kb', size / 1e3);
elseif size < 1e9
    ssize = sprintf('%1.2f Mb', size / 1e6);
elseif size < 1e12
    ssize = sprintf('%1.2f Gb', size / 1e9);
else
    ssize = sprintf('%1.2f Tb', size / 1e12);
end
end
