classdef CSVImportTest < matlab.unittest.TestCase
    
    properties
        tmp_dir
    end
    
    methods(TestMethodSetup)
        function setup(testCase)
            tmpd = tempname;
            mkdir(tmpd);
            testCase.tmp_dir = tmpd;
            utest_bst_setup();
        end
    end
    
    methods(TestMethodTeardown)
        function tear_down(testCase)
            rmdir(testCase.tmp_dir, 's');
            utest_clean_bst();
        end
    end
    
    methods(Test)
        
        function test_csv_import_event_merge(testCase)
            paradigm_fn = utest_request_data({'lesca_data','lesca_task_data_block.xls'});
            paradigm_file_sel = {paradigm_fn, 'CSV'};
            nirs_fn = utest_request_data({'dummy.nirs'});
            nirs = load(nirs_fn, '-mat');
            nirs_dt = diff(nirs.t(1:2));
            
            sFiles_dummy = utest_import_nirs_in_bst(nirs_fn);

            event_orig = db_template('event');
            event_orig.label = 'DMNirs';
            event_orig.times = [10 ; 15];
            event_orig.epochs     = ones(1, size(event_orig.times, 2));
            event_orig.channels   = cell(1, size(event_orig.times, 2));
            event_orig.notes      = cell(1, size(event_orig.times, 2));
            process_nst_import_csv_events('import_events', [], sFiles_dummy, event_orig);
            
            trial_span_types = process_nst_import_csv_events('get_trial_spans_opt');
            time_units = process_nst_import_csv_events('get_time_units_opt');
            time_origin_types = process_nst_import_csv_events('get_time_origin_opt');
            
            sFiles_processed = bst_process('CallProcess', ...
                'process_nst_import_csv_events', ...
                sFiles_dummy, [], ...
                'evtfile', paradigm_file_sel, ...
                'delimiter', '\t', ...
                'trial_label_column', 'blockType', ...
                'trial_start_column', 'blockClockBegin', ...
                'span_type', trial_span_types.START_END, ...
                'trial_end_column', 'blockClockEnd', ...
                'time_unit', time_units.MILLISECOND, ...
                'time_origin_type', time_origin_types.OFFSET, ...
                'time_origin_offset_sec', {0.0, '', 0}, ...
                'entry_filters', 'dbCurrentSessionId=22555,blockType=DMNirs', ...
                'max_events', 1000, ...
                'confirm_importation', 0);
            assert(~isempty(sFiles_processed));
            events = get_events(sFiles_processed);
            assert(length(events) == 1);
            assert(size(events(1).times, 1) == 2);
            
            i_evt = strcmp({events.label}, 'DMNirs');
            assert(events(i_evt).times(1, 1) == event_orig.times(1, 1));
            assert(events(i_evt).times(2, 1) == event_orig.times(2, 1));
            assert(abs(events(i_evt).times(1, 2) - 1482333540.553) <= nirs_dt);
            assert(abs(events(i_evt).times(2, 2) - 1482333570.823) <= nirs_dt);
        end
        
        function test_csv_import_filters(testCase)
            global GlobalData;
            
            paradigm_fn = utest_request_data({'lesca_data','lesca_task_data_block.xls'});
            paradigm_file_sel = {paradigm_fn, 'CSV'};
            nirs_fn = utest_request_data({'dummy.nirs'});
            nirs = load(nirs_fn, '-mat');
            nirs_dt = diff(nirs.t(1:2));
            
            trial_span_types = process_nst_import_csv_events('get_trial_spans_opt');
            time_units = process_nst_import_csv_events('get_time_units_opt');
            time_origin_types = process_nst_import_csv_events('get_time_origin_opt');
            
            sFiles_dummy = utest_import_nirs_in_bst(nirs_fn);
            sFiles_processed = bst_process('CallProcess', ...
                'process_nst_import_csv_events', ...
                sFiles_dummy, [], ...
                'evtfile', paradigm_file_sel, ...
                'delimiter', '\t', ...
                'trial_label_column', 'blockType', ...
                'trial_start_column', 'blockClockBegin', ...
                'span_type', trial_span_types.START_END, ...
                'trial_end_column', 'blockClockEnd', ...
                'time_unit', time_units.MILLISECOND, ...
                'time_origin_type', time_origin_types.OFFSET, ...
                'time_origin_offset_sec', {0.0, '', 0}, ...
                'entry_filters', 'dbCurrentSessionId=22555,blockType=DMNirs', ...
                'max_events', 1000, ...
                'confirm_importation', 0);
            assert(~isempty(sFiles_processed));
            events = get_events(sFiles_processed);
            assert(length(events) == 1);
            assert(size(events(1).times, 1) == 2);
            
            assert(abs(events(strcmp({events.label}, 'DMNirs')).times(1, 1) - 1482333540.553) <= nirs_dt);
            assert(abs(events(strcmp({events.label}, 'DMNirs')).times(2, 1) - 1482333570.823) <= nirs_dt);
            utest_reset_bst();
            
            sFiles_dummy = utest_import_nirs_in_bst(nirs_fn);
            sFiles_processed = bst_process('CallProcess', ...
                'process_nst_import_csv_events', ...
                sFiles_dummy, [], ...
                'evtfile', paradigm_file_sel, ...
                'delimiter', '\t', ...
                'trial_label_column', 'blockType', ...
                'trial_start_column', 'blockClockBegin', ...
                'span_type', trial_span_types.START_END, ...
                'trial_end_column', 'blockClockEnd', ...
                'time_unit', time_units.MILLISECOND, ...
                'time_origin_type', time_origin_types.OFFSET, ...
                'time_origin_offset_sec', {0.0, '', 0}, ...
                'entry_filters', 'blockClockBegin>=1482333369446,blockClockEnd<=1482334222724', ...
                'max_events', 1000, ...
                'confirm_importation', 0);
            assert(~isempty(sFiles_processed));
            events = get_events(sFiles_processed);
            assert(size(events(1).times, 1) == 2);
            all_onsets = [events.times];
            assert(all(all(all_onsets > 1482333369.446 - nirs_dt)));
            assert(all(all(all_onsets < 1482334222.724 + nirs_dt)));
            utest_reset_bst();
            %TODO: test filters with localizer csv
            
            sFiles_dummy = utest_import_nirs_in_bst(nirs_fn);
            sFiles_processed = bst_process('CallProcess', ...
                'process_nst_import_csv_events', ...
                sFiles_dummy, [], ...
                'evtfile', paradigm_file_sel, ...
                'delimiter', '\t', ...
                'trial_label_column', 'blockType', ...
                'trial_start_column', 'blockClockBegin', ...
                'span_type', trial_span_types.START_END, ...
                'trial_end_column', 'blockClockEnd', ...
                'time_unit', time_units.MILLISECOND, ...
                'time_origin_type', time_origin_types.OFFSET, ...
                'time_origin_offset_sec', {0.0, '', 0}, ...
                'entry_filters', 'waza=22555,blockType=DMNirs', ...
                'max_events', 1000, ...
                'confirm_importation', 0);
            assert(isempty(sFiles_processed));
            assert(~isempty(strfind(GlobalData.lastestFullErrMsg, 'Bad entry filter')) && ...
                ~isempty(strfind(GlobalData.lastestFullErrMsg, '"waza" not found')));
            
            sFiles_dummy = utest_import_nirs_in_bst(nirs_fn);
            sFiles_processed = bst_process('CallProcess', ...
                'process_nst_import_csv_events', ...
                sFiles_dummy, [], ...
                'evtfile', paradigm_file_sel, ...
                'delimiter', '\t', ...
                'trial_label_column', 'blockType', ...
                'trial_start_column', 'blockClockBegin', ...
                'span_type', trial_span_types.START_END, ...
                'trial_end_column', 'blockClockEnd', ...
                'time_unit', time_units.MILLISECOND, ...
                'time_origin_type', time_origin_types.OFFSET, ...
                'time_origin_offset_sec', {0.0, '', 0}, ...
                'entry_filters', 'blockClockBegin<0', ...
                'max_events', 1000, ...
                'confirm_importation', 0);
            assert(isempty(sFiles_processed));
            assert(~isempty(strfind(GlobalData.lastestFullErrMsg, 'No event to import')));
            
            
            sFiles_processed = bst_process('CallProcess', ...
                'process_nst_import_csv_events', ...
                sFiles_dummy, [], ...
                'evtfile', paradigm_file_sel, ...
                'delimiter', '\t', ...
                'trial_label_column', 'blockType', ...
                'trial_start_column', 'blockClockBegin', ...
                'span_type', trial_span_types.START_END, ...
                'trial_end_column', 'blockClockEnd', ...
                'time_unit', time_units.MILLISECOND, ...
                'time_origin_type', time_origin_types.OFFSET, ...
                'time_origin_offset_sec', {0.0, '', 0}, ...
                'entry_filters', 'dbCurrentSessionId=03121980,blockType=DMNirs', ...
                'max_events', 1000, ...
                'confirm_importation', 0);
            assert(isempty(sFiles_processed));
            assert(~isempty(strfind(GlobalData.lastestFullErrMsg, 'Bad entry filter')) && ...
                ~isempty(strfind(GlobalData.lastestFullErrMsg, '"03121980" not found')));
            
            %TODO: test malformed operator & conversions between str & double
            utest_reset_bst();
            
            paradigm_fn = utest_request_data({'paradigm_localizer.csv'});
            paradigm_file_sel = {paradigm_fn, 'CSV'};
            sFiles_dummy = utest_import_nirs_in_bst(nirs_fn);
            sFiles_processed = bst_process('CallProcess', ...
                'process_nst_import_csv_events', ...
                sFiles_dummy, [], ...
                'evtfile', paradigm_file_sel, ...
                'delimiter', ',', ...
                'trial_label_column', 'condition', ...
                'trial_start_column', 'onset', ...
                'span_type', trial_span_types.START_DURATION, ...
                'trial_end_column', 'duration', ...
                'time_unit', time_units.SECOND, ...
                'time_origin_type', time_origin_types.OFFSET, ...
                'time_origin_offset_sec', {0.0, '', 0}, ...
                'entry_filters', 'onset>=10', ...
                'max_events', 1000, ...
                'confirm_importation', 0);
            assert(~isempty(sFiles_processed));
            events = get_events(sFiles_processed);
            all_onsets = [events.times];
            assert(all(all(all_onsets > 10 - nirs_dt)));
            assert(abs(events(strcmp({events.label}, 'clicDaudio')).times(1, 1) - 11.4) <= nirs_dt);
            
            utest_reset_bst();
            
        end
        
        function test_csv_event_import_max_events(testCase)
            global GlobalData;
            
            paradigm_fn = utest_request_data({'lesca_data', 'lesca_task_data_block.xls'});
            paradigm_file_sel = {paradigm_fn, 'CSV'};
            nirs_fn = utest_request_data({'dummy.nirs'});
            
            trial_span_types = process_nst_import_csv_events('get_trial_spans_opt');
            time_units = process_nst_import_csv_events('get_time_units_opt');
            time_origin_types = process_nst_import_csv_events('get_time_origin_opt');
            
            sFiles_dummy = utest_import_nirs_in_bst(nirs_fn);
            sFiles_processed = bst_process('CallProcess', ...
                'process_nst_import_csv_events', ...
                sFiles_dummy, [], ...
                'evtfile', paradigm_file_sel, ...
                'delimiter', '\t', ...
                'trial_label_column', 'blockType', ...
                'trial_start_column', 'blockClockBegin', ...
                'span_type', trial_span_types.START_END, ...
                'trial_end_column', 'blockClockEnd', ...
                'time_unit', time_units.MILLISECOND, ...
                'time_origin_type', time_origin_types.OFFSET, ...
                'time_origin_offset_sec', {0.0, '', 0}, ...
                'entry_filters', '', ...
                'max_events', 1000, ...
                'confirm_importation', 0);
            assert(isempty(sFiles_processed));
            assert(~isempty(strfind(GlobalData.lastestFullErrMsg, 'Too many events')));
            utest_reset_bst();
            
        end
        
        function test_csv_event_import_time_origin(testCase)
            paradigm_fn = utest_request_data({'lesca_data','lesca_task_data_block.xls'});
            paradigm_file_sel = {paradigm_fn, 'CSV'};
            nirs_fn = utest_request_data({'dummy.nirs'});
            nirs = load(nirs_fn, '-mat');
            nirs_dt = diff(nirs.t(1:2));
            
            trial_span_types = process_nst_import_csv_events('get_trial_spans_opt');
            time_units = process_nst_import_csv_events('get_time_units_opt');
            time_origin_types = process_nst_import_csv_events('get_time_origin_opt');
            
            sFiles_dummy = utest_import_nirs_in_bst(nirs_fn);
            offset = -1482333300;
            sFiles_processed = bst_process('CallProcess', ...
                'process_nst_import_csv_events', ...
                sFiles_dummy, [], ...
                'evtfile', paradigm_file_sel, ...
                'delimiter', '\t', ...
                'trial_label_column', 'blockType', ...
                'trial_start_column', 'blockClockBegin', ...
                'span_type', trial_span_types.START_END, ...
                'trial_end_column', 'blockClockEnd', ...
                'time_unit', time_units.MILLISECOND, ...
                'time_origin_type', time_origin_types.OFFSET, ...
                'time_origin_offset_sec', {offset, '', 0}, ...
                'entry_filters', 'dbCurrentSessionId=22555', ...
                'max_events', 1000, ...
                'confirm_importation', 0);
            assert(~isempty(sFiles_processed));
            events = get_events(sFiles_processed);
            assert(size(events(1).times, 1) == 2);
            assert(abs(events(strcmp({events.label}, 'DMNirs')).times(1, 1) - (1482333540.553 + offset)) < nirs_dt);
            assert(abs(events(strcmp({events.label}, 'DMNirs')).times(2, 1) - (1482333570.823 + offset)) < nirs_dt);
            utest_reset_bst();
            
            sFiles_dummy = utest_import_nirs_in_bst(nirs_fn);
            sFiles_processed = bst_process('CallProcess', ...
                'process_nst_import_csv_events', ...
                sFiles_dummy, [], ...
                'evtfile', paradigm_file_sel, ...
                'delimiter', '\t', ...
                'trial_label_column', 'blockType', ...
                'trial_start_column', 'blockClockBegin', ...
                'span_type', trial_span_types.START_END, ...
                'trial_end_column', 'blockClockEnd', ...
                'time_unit', time_units.MILLISECOND, ...
                'time_origin_type', time_origin_types.VALUE, ...
                'time_origin_value_sec', {50, '', 0}, ...
                'entry_filters', 'dbCurrentSessionId=22555', ...
                'max_events', 1000, ...
                'confirm_importation', 0);
            assert(~isempty(sFiles_processed));
            events = get_events(sFiles_processed);
            assert(size(events(1).times, 1) == 2);
            assert(abs(events(strcmp({events.label}, 'DMNirs')).times(1, 1) - (1482333540.553 - 1482333369.446 + 50)) < nirs_dt);
            assert(abs(events(strcmp({events.label}, 'DMNirs')).times(2, 1) - (1482333570.823 - 1482333369.446 + 50)) < nirs_dt);
            utest_reset_bst();
        end
        
        function test_csv_event_import_col_spec(testCase)
            global GlobalData;
            trial_span_types = process_nst_import_csv_events('get_trial_spans_opt');
            time_units = process_nst_import_csv_events('get_time_units_opt');
            time_origin_types = process_nst_import_csv_events('get_time_origin_opt');
            
            nirs_fn = utest_request_data({'dummy.nirs'});
            nirs = load(nirs_fn, '-mat');
            nirs_dt = diff(nirs.t(1:2));
            
            paradigm_fn = utest_request_data({'paradigm_localizer.csv'});
            paradigm_file_sel = {paradigm_fn, 'CSV'};
            sFiles_dummy = utest_import_nirs_in_bst(nirs_fn);
            sFiles_processed = bst_process('CallProcess', ...
                'process_nst_import_csv_events', ...
                sFiles_dummy, [], ...
                'evtfile', paradigm_file_sel, ...
                'delimiter', ',', ...
                'trial_label_column', 'condition', ...
                'trial_start_column', 'onset', ...
                'span_type', trial_span_types.START_DURATION, ...
                'trial_end_column', 'duration', ...
                'time_unit', time_units.SECOND, ...
                'time_origin_type', time_origin_types.OFFSET, ...
                'time_origin_offset_sec', {0.0, '', 0}, ...
                'entry_filters', '', ...
                'max_events', 1000, ...
                'confirm_importation', 0);
            assert(~isempty(sFiles_processed));
            events = get_events(sFiles_processed);
            assert(size(events(1).times, 1) == 2);
            assert(abs(events(strcmp({events.label}, 'clicGaudio')).times(1, 1) - 23.7) < nirs_dt);
            assert(abs(events(strcmp({events.label}, 'clicGaudio')).times(2, 1) - 25.7) < nirs_dt);
            utest_reset_bst();
            
            paradigm_fn = utest_request_data({'lesca_data','lesca_task_data_block.xls'});
            paradigm_file_sel = {paradigm_fn, 'CSV'};
            
            sFiles_dummy = utest_import_nirs_in_bst(nirs_fn);
            sFiles_processed = bst_process('CallProcess', ...
                'process_nst_import_csv_events', ...
                sFiles_dummy, [], ...
                'evtfile', paradigm_file_sel, ...
                'delimiter', '\t', ...
                'trial_label_column', '', ...
                'trial_start_column', 'blockClockBegin', ...
                'span_type', trial_span_types.START_ONLY, ...
                'trial_end_column', 'blockClockEnd', ...
                'time_unit', time_units.MILLISECOND, ...
                'time_origin_type', time_origin_types.OFFSET, ...
                'time_origin_offset_sec', {0.0, '', 0}, ...
                'entry_filters', '', ...
                'max_events', 1000, ...
                'confirm_importation', 0);
            assert(isempty(sFiles_processed));
            assert(~isempty(strfind(GlobalData.lastestFullErrMsg, 'trial label')) && ...
                   ~isempty(strfind(GlobalData.lastestFullErrMsg, 'not set')));
            
            sFiles_processed = bst_process('CallProcess', ...
                'process_nst_import_csv_events', ...
                sFiles_dummy, [], ...
                'evtfile', paradigm_file_sel, ...
                'delimiter', '\t', ...
                'trial_label_column', 'George Abidbol', ...
                'trial_start_column', 'blockClockBegin', ...
                'span_type', trial_span_types.START_ONLY, ...
                'trial_end_column', 'blockClockEnd', ...
                'time_unit', time_units.MILLISECOND, ...
                'time_origin_type', time_origin_types.OFFSET, ...
                'time_origin_offset_sec', {0.0, '', 0}, ...
                'entry_filters', '', ...
                'max_events', 1000, ...
                'confirm_importation', 0);
            assert(isempty(sFiles_processed));
            assert(~isempty(strfind(GlobalData.lastestFullErrMsg, '"George Abidbol" is not valid')));
            
            sFiles_processed = bst_process('CallProcess', ...
                'process_nst_import_csv_events', ...
                sFiles_dummy, [], ...
                'evtfile', paradigm_file_sel, ...
                'delimiter', '\t', ...
                'trial_label_column', 'blockType', ...
                'trial_start_column', 'blockClockBegin', ...
                'span_type', trial_span_types.START_ONLY, ...
                'trial_end_column', 'tumauraspas', ...
                'time_unit', time_units.MILLISECOND, ...
                'time_origin_type', time_origin_types.OFFSET, ...
                'time_origin_offset_sec', {0.0, '', 0}, ...
                'entry_filters', 'dbCurrentSessionId=22555', ...
                'max_events', 1000, ...
                'confirm_importation', 0);
            assert(~isempty(sFiles_processed));
            events = get_events(sFiles_processed);
            assert(size(events(1).times, 1) == 1);
            assert(abs(events(strcmp({events.label}, 'DMNirs')).times(1) - 1482333540.553) < nirs_dt);
            utest_reset_bst();
            
            sFiles_dummy = utest_import_nirs_in_bst(nirs_fn);
            sFiles_processed = bst_process('CallProcess', ...
                'process_nst_import_csv_events', ...
                sFiles_dummy, [], ...
                'evtfile', paradigm_file_sel, ...
                'delimiter', '\t', ...
                'trial_label_column', 'blockType', ...
                'trial_start_column', 'blockClockBegin', ...
                'span_type', trial_span_types.START_END, ...
                'trial_end_column', 'blockClockEnd', ...
                'time_unit', time_units.MILLISECOND, ...
                'time_origin_type', time_origin_types.OFFSET, ...
                'time_origin_offset_sec', {0.0, '', 0}, ...
                'entry_filters', 'dbCurrentSessionId=22555', ...
                'max_events', 1000, ...
                'confirm_importation', 0);
            assert(~isempty(sFiles_processed));
            events = get_events(sFiles_processed);
            assert(size(events(1).times, 1) == 2);
            assert(abs(events(strcmp({events.label}, 'DMNirs')).times(1, 1) - 1482333540.553) < nirs_dt);
            assert(abs(events(strcmp({events.label}, 'DMNirs')).times(2, 1) - 1482333570.823) < nirs_dt);
            utest_reset_bst();
        end
          
        function test_csv_event_import_time_unit(testCase)
            
            paradigm_fn = utest_request_data({'lesca_data','lesca_task_data_block.xls'});
            paradigm_file_sel = {paradigm_fn, 'CSV'};
            nirs_fn = utest_request_data({'dummy.nirs'});
            nirs = load(nirs_fn, '-mat');
            nirs_dt = diff(nirs.t(1:2));
            
            trial_span_types = process_nst_import_csv_events('get_trial_spans_opt');
            time_units = process_nst_import_csv_events('get_time_units_opt');
            time_origin_types = process_nst_import_csv_events('get_time_origin_opt');
            
            sFiles_dummy = utest_import_nirs_in_bst(nirs_fn);
            sFiles_processed = bst_process('CallProcess', ...
                'process_nst_import_csv_events', ...
                sFiles_dummy, [], ...
                'evtfile', paradigm_file_sel, ...
                'delimiter', '\t', ...
                'trial_label_column', 'blockType', ...
                'trial_start_column', 'blockClockBegin', ...
                'span_type', trial_span_types.START_END, ...
                'trial_end_column', 'blockClockEnd', ...
                'time_unit', time_units.SECOND, ...
                'time_origin_type', time_origin_types.OFFSET, ...
                'time_origin_offset_sec', {0.0, '', 0}, ...
                'entry_filters', 'dbCurrentSessionId=22555', ...
                'max_events', 1000, ...
                'confirm_importation', 0);
            assert(~isempty(sFiles_processed));
            events = get_events(sFiles_processed);
            assert(size(events(1).times, 1) == 2);
            assert(abs(events(strcmp({events.label}, 'DMNirs')).times(1, 1) - 1482333540553) < nirs_dt);
            assert(abs(events(strcmp({events.label}, 'DMNirs')).times(2, 1) - 1482333570823) < nirs_dt);
            utest_reset_bst();
            
            sFiles_dummy = utest_import_nirs_in_bst(nirs_fn);
            sFiles_processed = bst_process('CallProcess', ...
                'process_nst_import_csv_events', ...
                sFiles_dummy, [], ...
                'evtfile', paradigm_file_sel, ...
                'delimiter', '\t', ...
                'trial_label_column', 'blockType', ...
                'trial_start_column', 'blockClockBegin', ...
                'span_type', trial_span_types.START_END, ...
                'trial_end_column', 'blockClockEnd', ...
                'time_unit', time_units.MICROSECOND, ...
                'time_origin_type', time_origin_types.OFFSET, ...
                'time_origin_offset_sec', {0.0, '', 0}, ...
                'entry_filters', 'dbCurrentSessionId=22555', ...
                'max_events', 1000, ...
                'confirm_importation', 0);
            assert(~isempty(sFiles_processed));
            events = get_events(sFiles_processed);
            assert(size(events(1).times, 1) == 2);
            assert(abs(events(strcmp({events.label}, 'DMNirs')).times(1, 1) - 1482333.540553) < nirs_dt);
            assert(abs(events(strcmp({events.label}, 'DMNirs')).times(2, 1) - 1482333.570823) < nirs_dt);
            utest_reset_bst();
        end
    end
end

function events = get_events(sFile)
DataMat = in_bst_data(sFile.FileName, 'F');
events = DataMat.F.events;
end
